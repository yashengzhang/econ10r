knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(fastDummies) ## Install the "fastDummies" package if you haven't already
library(ISLR) ## Install the "ISLR" package if you haven't already
library(car) ## Install the "car" package if you haven't already
library(lmtest) ## Install the "car" package if you haven't already
library(sandwich) ## Install the "car" package if you haven't already
library(haven) ## Install the "car" package if you haven't already
library(AER) ## Install the "car" package if you haven't already
expo <- function(x, n, y, z){
replicate(x, expr = mean(runif(n, min = y, max = z))
}
expo <- function(x, n, y, z){
replicate(x, expr = mean(runif(n, min = y, max = z)))
}
hist(expo(10000, 100, 0, 50),
freq = FALSE,
main = "Sampling Distribution of Sample Mean", xlab = "Simulated Sample Mean")
lines(density(expo(10000, 100, 1)), col = "black")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(fastDummies) ## Install the "fastDummies" package if you haven't already
library(ISLR) ## Install the "ISLR" package if you haven't already
library(car) ## Install the "car" package if you haven't already
library(lmtest) ## Install the "car" package if you haven't already
library(sandwich) ## Install the "car" package if you haven't already
library(haven) ## Install the "car" package if you haven't already
library(AER) ## Install the "car" package if you haven't already
uniform <- function(x, n, y, z){
replicate(x, expr = mean(runif(n, min = y, max = z)))
}
hist(uniform(10000, 100, 0, 50),
freq = FALSE,
main = "Sampling Distribution of Sample Mean", xlab = "Simulated Sample Mean")
lines(density(uniform(10000, 100, 0, 50)), col = "black")
uniform <- function(x, n, y, z){
replicate(x, expr = mean(runif(n, min = y, max = z)))
}
hist(uniform(10000, 100, 0, 1),
freq = FALSE,
main = "Sampling Distribution of Sample Mean", xlab = "Simulated Sample Mean")
lines(density(uniform(10000, 100, 0, 1)), col = "black")
airq <- read_dta("airq.dta")
head(airq, 10)
View(airq)
reg1 <- lm(airq ~ ., data = airq)
summary(airq)
reg1 <- lm(airq ~ ., data = airq)
summary(reg1)
summary(airq$airq)
## Question 2.4 ()
plot(x = reg1, which = 3)
ncvTest(reg1)
residuals(reg1)
airq$resid <- residuals(reg1)
View(airq)
plot(airq$resid, airq$coas)
airq$resid <- residuals(reg1)
plot(airq$coas, airq$resid)
airq$resid <- residuals(reg1)
var(airq$resid, airq$coas == 0)
var(airq$resid, airq$coas == 1)
airq$resid <- residuals(reg1)
var(airq$resid, airq$coas == 0)
var(airq$resid)
airq$resid <- residuals(reg1)
var(airq$resid)
var(airq$resid, airq$coas == 1)
var(filter(airq, coas == 1)[, c("resid")])
filter(airq, coas == 1)[, c("resid")]
coas <- filter(airq, coas == 1)
airq$resid <- residuals(reg1)
coas <- filter(airq, coas == 1)
nocoas <- filter(airq, coas == 0)
var(coas$resid)
var(nocoas$resid)
var.test(coas$resid, nocoas$resid)
coeftest(reg1, vcov = vcovHC)
auto <- Auto
View(auto)
set.seed(1)
sample <- sample(c(TRUE, FALSE), nrow(auto), replace = TRUE, prob = c(0.5, 0.5))
train <- default[sample, ]
set.seed(1)
sample <- sample(c(TRUE, FALSE), nrow(auto), replace = TRUE, prob = c(0.5, 0.5))
train <- auto[sample, ]
test <- auto[!sample, ]
View(train)
View(test)
View(train)
train$origin <- as.factor(train$origin)
reg2 <- lm(mpg ~ . - name, data = train)
summary(reg2)
test$origin <- as.factor(test$origin)
test$origin <- as.factor(test$origin)
predict_test <- predict(reg2, newdata = test)
test$origin <- as.factor(test$origin)
predict_test <- predict(reg2, newdata = test, na.action = na.pass)
test$origin <- as.factor(test$origin)
predict_test <- predict(reg2, newdata = test - name)
test$origin <- as.factor(test$origin)
predict_test <- predict(reg2, newdata = test - test$name)
test$origin <- as.factor(test$origin)
predict_test <- predict(reg2, newdata = test[, !name])
train$origin <- as.factor(train$origin)
train <- select(train, -c("name"))
reg2 <- lm(mpg ~ . - name, data = train)
train$origin <- as.factor(train$origin)
train <- select(train, -c("name"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(fastDummies) ## Install the "fastDummies" package if you haven't already
library(ISLR) ## Install the "ISLR" package if you haven't already
library(car) ## Install the "car" package if you haven't already
library(lmtest) ## Install the "car" package if you haven't already
library(sandwich) ## Install the "car" package if you haven't already
library(haven) ## Install the "car" package if you haven't already
library(AER) ## Install the "car" package if you haven't already
set.seed(1)
uniform <- function(x, n, y, z){
replicate(x, expr = mean(runif(n, min = y, max = z)))
}
hist(uniform(10000, 100, 0, 1),
freq = FALSE,
main = "Sampling Distribution of Sample Mean", xlab = "Simulated Sample Mean")
lines(density(uniform(10000, 100, 0, 1)), col = "black")
airq <- read_dta("airq.dta")
head(airq, 10)
reg1 <- lm(airq ~ ., data = airq)
summary(reg1)
plot(x = reg1, which = 3)
ncvTest(reg1)
airq$resid <- residuals(reg1)
coas <- filter(airq, coas == 1)
nocoas <- filter(airq, coas == 0)
var(coas$resid)
var(nocoas$resid)
var.test(coas$resid, nocoas$resid)
coeftest(reg1, vcov = vcovHC)
auto <- Auto
set.seed(1)
sample <- sample(c(TRUE, FALSE), nrow(auto), replace = TRUE, prob = c(0.5, 0.5))
train <- auto[sample, ]
test <- auto[!sample, ]
train$origin <- as.factor(train$origin)
train <- select(train, -c("name"))
reg2 <- lm(mpg ~ ., data = train)
summary(reg2)
test$origin <- as.factor(test$origin)
predict_test <- predict(reg2, newdata = test[, !name])
View(train)
test$origin <- as.factor(test$origin)
test <- select(test, -c("name"))
predict_test <- predict(reg2, newdata = test[, !name])
test$origin <- as.factor(test$origin)
test <- select(test, -c("name"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(fastDummies) ## Install the "fastDummies" package if you haven't already
library(ISLR) ## Install the "ISLR" package if you haven't already
library(car) ## Install the "car" package if you haven't already
library(lmtest) ## Install the "car" package if you haven't already
library(sandwich) ## Install the "car" package if you haven't already
library(haven) ## Install the "car" package if you haven't already
library(AER) ## Install the "car" package if you haven't already
set.seed(1)
uniform <- function(x, n, y, z){
replicate(x, expr = mean(runif(n, min = y, max = z)))
}
hist(uniform(10000, 100, 0, 1),
freq = FALSE,
main = "Sampling Distribution of Sample Mean", xlab = "Simulated Sample Mean")
lines(density(uniform(10000, 100, 0, 1)), col = "black")
airq <- read_dta("airq.dta")
head(airq, 10)
reg1 <- lm(airq ~ ., data = airq)
summary(reg1)
plot(x = reg1, which = 3)
ncvTest(reg1)
airq$resid <- residuals(reg1)
coas <- filter(airq, coas == 1)
nocoas <- filter(airq, coas == 0)
var(coas$resid)
var(nocoas$resid)
var.test(coas$resid, nocoas$resid)
coeftest(reg1, vcov = vcovHC)
auto <- Auto
set.seed(1)
sample <- sample(c(TRUE, FALSE), nrow(auto), replace = TRUE, prob = c(0.5, 0.5))
train <- auto[sample, ]
test <- auto[!sample, ]
train$origin <- as.factor(train$origin)
train <- select(train, -c("name"))
reg2 <- lm(mpg ~ ., data = train)
summary(reg2)
test$origin <- as.factor(test$origin)
test <- select(test, -c("name"))
predict_test <- predict(reg2, newdata = test)
head(predict_test)
predict_test
View(test)
t.test(x = test$mpg, y = predict_test, var.equal = TRUE)
t.test(x = test$mpg, y = predict_test, var.equal = FALSE)
t.test(x = test$mpg, y = predict_test, var.equal = TRUE)
t.test(x = test$mpg, y = predict_test, var.equal = FALSE)
plot(x = test$mpg, y = predict_test)
View(airq)
View(airq)
colonial <- read_dta("colonial.dta")
View(colonial)
reg3 <- lm(lgdp ~ prot, data = colonial)
coeftest(reg3, vcov = vcovHC)
reg3 <- lm(lgdp ~ prot, data = colonial)
summary(reg3)
coeftest(reg3, vcov = vcovHC)
prothat <- predict(reg4)
reg4 <- lm(prot ~ logmort, data = colonial)
prothat <- predict(reg4)
reg5 <- lm(lgdp ~ prothat, data = colonial)
summary(reg5)
reg4 <- lm(prot ~ logmort, data = colonial)
prothat <- predict(reg4)
reg5 <- lm(lgdp ~ prothat, data = colonial)
summary(reg5)
reg6 <- ivreg(lgdp ~ prot | logmort, data = colonial)
summary(reg6)
coeftest(reg6, vcov = vcovHC)
reg7 <- lm(lgdp ~ logmort, data = colonial)
summary(reg7)
reg7 <- lm(lgdp ~ logmort, data = colonial)
summary(reg7)$coefficients[2]/summary(reg4)$coefficents[2]
summary(reg4)$coefficents[2]
summary(reg4)$coefficents
coef(summary(reg7))
reg7 <- lm(lgdp ~ logmort, data = colonial)
coef(summary(reg7))["logmort"]/coef(summary(reg4))["logmort"]
coef(summary(reg4))["logmort"]
coef(summary(reg4))
coef(summary(reg7))["logmort", "Estimate"]/coef(summary(reg4))["logmort", "Estimate"]
